package org.python.ReL;

import java.sql.SQLException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.python.antlr.base.expr;

import org.python.ReL.PyRelConnection;
import org.python.ReL.SPARQLHelper;
import org.python.ReL.SIMHelper;

import wdb.metadata.*;
import wdb.parser.*;

import java.io.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import org.antlr.runtime.ANTLRStringStream;
import org.apache.commons.io.IOUtils;

public class ProcessLanguages {
    PyRelConnection conn = null;

    /**
     * Process a language statement such as SQL or SIM.
     *
     * Note:  The connection should not be closed within this class, as it will be closed
     * by its parent (invoker).
     *
     * @param connection
     */
    public ProcessLanguages(PyRelConnection conn) {
        this.conn = conn; 
    }

    public String processSIM(String ReLstmt) { // ------------------------------------- SIM -------------------------
    
// MyInputStream m = new MyInputStream(ReLstmt);
// MyInputStream m = ProcessLanguages.class.getClassLoader().MyInputStream(ReLstmt);
// InputStream is = m.getSim();
// InputStream is = ProcessLanguages.class.getResourceAsStream(ReLstmt);
// InputStream is = getClass().getClassLoader().getResourceAsStream(ReLstmt);
// Class currentClass = new Object() { }.getClass().getEnclosingClass();
// System.out.println("currentClass: " + currentClass);
// InputStream is = org.python.ReL.ProcessLanguages.class.ByteArrayInputStream(ReLstmt.getBytes());
// InputStream is = getClass().getClassLoader().ByteArrayInputStream(ReLstmt.getBytes());
// System.out.println("is: " + is);
// InputStream is = IOUtils.toInputStream(new String(ReLstmt));
// final ANTLRStringStream charStream = new ANTLRStringStream(ReLstmt);
// final JavaLexer lexer = new JavaLexer( charStream );
// final TokenStream tokenStream = new CommonTokenStream( lexer );
// QueryParser parser =  new QueryParser(charStream);
// QueryParser parser =  new QueryParser(new ParserTokenManager(InputStream));
ReLstmt += ";";
InputStream is = new ByteArrayInputStream(ReLstmt.getBytes());
QueryParser parser =  new QueryParser(is);
// QueryParser.ReInit(WDB.in);
System.out.println("parser: " + parser);
Query q = null;
System.out.println("Here");
try
{
   q = parser.getNextQuery();
}
catch(Exception e)
{
	System.out.println(e.getMessage());
}

System.out.println("q: " + q);
// processQuery(q);
InsertQuery iq = (InsertQuery)q;
DvaAssignment dvaAssignment = (DvaAssignment)iq.getAssignment(0);
System.out.println("InsertQuery: " + dvaAssignment.AttributeName + ", " + dvaAssignment.Value);
return null;
    
		String[] strings = ReLstmt.replaceAll(":=", " := ").replaceAll("::", " :: ").replaceAll("\\(", " ( ").replaceAll("\\)", " ) ").replaceAll(",", " ").replaceAll("( )+", " ").split(" ");
		String sparql = null;
		if(strings[0].toUpperCase().contains("FROM")) {	// ------------------------------------- FROM -------------------------
		
			String className = strings[1].toUpperCase();
			List<String> dvaAttribs = new ArrayList<String>();
			List<String> evaAttribs = new ArrayList<String>();
			Map<String, String> whereAttrValues = new HashMap<String, String>();
			String whereClause = "";

			assert(strings[2].toUpperCase().contains("RETRIEVE"));
			int index = 3;
			String currentEvaAttrib = null;
			while (index < strings.length) {
				String s = strings[index].trim();
				if (s.toUpperCase().equals("WHERE")) {
					whereAttrValues.put(strings[index+1].toUpperCase(), strings[index+3].replaceAll("'", "").toUpperCase());
					index += 4;
				}
				else if (s.toUpperCase().equals("AND")) {
					whereAttrValues.put(strings[index+1].toUpperCase(), strings[index+3].replaceAll("'", "").toUpperCase());
					index += 4;
				}
				else {
					if((index+1) <= strings.length) {
						if (s.toUpperCase().startsWith("AT")) {
							//System.out.println(currentEvaAttrib+" "+strings[index]);
							assert(currentEvaAttrib != null);
							currentEvaAttrib += " " + strings[index] + " " + strings[index+1];
							index++;
						}
						else if ((index+2) <= strings.length && strings[index+1].toUpperCase().startsWith("AT")) {
							if(currentEvaAttrib != null) evaAttribs.add(currentEvaAttrib.toUpperCase());
							currentEvaAttrib = null;
							currentEvaAttrib = strings[index] + " " + "AT" + " " + strings[index+2];
							index++;
							index++;
						}
						else if (s.toUpperCase().startsWith("OF")) {
							// Right now, OF acts the same as AT but OF will be a Relationship Attribute
							assert(currentEvaAttrib != null);
							currentEvaAttrib += " " + strings[index] + " " + strings[index+1];
							index++;
						}
						else {
							if(currentEvaAttrib != null) evaAttribs.add(currentEvaAttrib.toUpperCase());
							currentEvaAttrib = null;
							dvaAttribs.add(strings[index].toUpperCase());
						}
						index++;
					}
				}
			}
			if(currentEvaAttrib != null) evaAttribs.add(currentEvaAttrib.toUpperCase());

System.out.println("className: " + className);
System.out.println("dvaAttribs: " + dvaAttribs);
System.out.println("evaAttribs: " + evaAttribs);
			SIMHelper simhelper = new SIMHelper(conn);
			try {
					sparql = simhelper.executeFrom(className, dvaAttribs, evaAttribs, whereAttrValues);
				} catch (Exception e) {
					System.out.println(e);
			}
			System.out.println(sparql);
		}
		else if(strings[0].toUpperCase().contains("INSERT")) {   	// ------------------------------------- INSERT -------------------------
		
			// E.g., SIM on conn " INSERT EMP empno:= 222, ename := 'Phil', deptno := dept WITH deptno = 10, sal := 2000, mgr := emp WITH empno = 111"
			String fromClause = "";
			if(ReLstmt.contains(" FROM")) {
				fromClause = ReLstmt.substring(ReLstmt.indexOf("FROM"), ReLstmt.length()).replaceAll(",", "").toUpperCase();
System.out.println("FROM: " + fromClause);
				ReLstmt = ReLstmt.substring(0, ReLstmt.indexOf(" FROM")); 
				strings = ReLstmt.split(" ");
            }
			String className = strings[1].toUpperCase();
			int strIndex = 2;
			List<String> attributeNames = new ArrayList<String>();
			List<String> attributeValues = new ArrayList<String>();
			while(strIndex < strings.length) {
				strings[strIndex] = strings[strIndex].trim();
				if((strIndex+5) < strings.length && strings[strIndex+5].toUpperCase().equals("WITH")) {
					attributeNames.add(strings[strIndex].toUpperCase());
					attributeValues.add(strings[strIndex+2].toUpperCase() + " " + strings[strIndex+4].toUpperCase() + " " + strings[strIndex+5].toUpperCase() + " " + strings[strIndex+6].toUpperCase() + " " + strings[strIndex+8].toUpperCase());
					strIndex += 9;
				}
				else if((strIndex+3) < strings.length && strings[strIndex+1].toUpperCase().equals("OF")) {
					// E.G., SIM on conn " INSERT EMP date OF deptno := '1/1/15'"
					attributeNames.add(strings[strIndex].toUpperCase());
					attributeValues.add(strings[strIndex].toUpperCase() + " " + strings[strIndex+1].toUpperCase() + " " + strings[strIndex+2].toUpperCase() + " " + strings[strIndex+4].toUpperCase());
					strIndex += 5;
				}
				else if((strIndex+1) < strings.length && strings[strIndex+1].equals(":=")) {
					attributeNames.add(strings[strIndex].toUpperCase());
					attributeValues.add(strings[strIndex+2].toUpperCase());
					strIndex += 3;
				}
			}
			System.out.println("\nattributeNames: " + attributeNames);
			System.out.println("attributeValues: " + attributeValues + "\n");
			try {
				SIMHelper simhelper = new SIMHelper(conn);
				simhelper.executeInsert(className, attributeNames, attributeValues, fromClause);
			} catch (Exception e) {
				System.out.println(e);
			}
		} 
		else if(strings[0].contains("MODIFY")) {	// ------------------------------------- MODIFY -------------------------
/*
MODIFY male (fatherOf::hasFather := female WITH id := 4) WHERE id = 2

MODIFY LIMIT=ALL EMPLOYEE
(EMPLOYEE_SALARY:= EMPLOYEE_SALARY * 1.1,
EMPLOYEE_ID:= EMPLOYEE_SALARY
)
WHERE LAST_NAME OF NAME = "Hyams" AND FIRST_NAME OF NAME = "Joe"

MODIFY EMPLOYEE
(EDUCATION:= EXCLUDE EDUCATION WITH (DEGREE_OBTAINED = MS),
EDUCATION:= INCLUDE (DEGREE_OBTAINED:= MA,
YEAR_OBTAINED:= 1/1/89,
GPA:= 3.7)
)
WHERE EMPLOYEE_ID = 12345678
*/	
			// int limit = Integer.parseInt(elements[0].toString());
			String className = strings[1].toUpperCase();
			String Where = "";
			if(ReLstmt.contains("WHERE")) Where = ReLstmt.substring(ReLstmt.indexOf("WHERE"), ReLstmt.length()).replace("WHERE", "");
			System.out.println("Where: " + Where);
			int strIndex = 3;
			List<String> attributeNames = new ArrayList<String>();
			List<String> attributeValues = new ArrayList<String>();
			Map<String, String> whereAttrValues = new HashMap<String, String>();
			while(strIndex < strings.length) {
				strings[strIndex] = strings[strIndex].trim();
				String s = strings[strIndex].trim();
				if (s.toUpperCase().equals("WHERE")) {
					whereAttrValues.put(strings[strIndex+1].toUpperCase(), strings[strIndex+3].replaceAll("'", "").toUpperCase());
					strIndex += 4;
				}
				else if (s.toUpperCase().equals("AND")) {
					whereAttrValues.put(strings[strIndex+1].toUpperCase(), strings[strIndex+3].replaceAll("'", "").toUpperCase());
					strIndex += 4;
				}
				else if((strIndex+5) < strings.length && strings[strIndex+5].toUpperCase().equals("WITH")) {
					attributeNames.add(strings[strIndex].toUpperCase());
					attributeValues.add(strings[strIndex+2].toUpperCase() + " " + strings[strIndex+4].toUpperCase() + " " + strings[strIndex+5].toUpperCase() + " " + strings[strIndex+6].toUpperCase() + " " + strings[strIndex+8].toUpperCase());
					strIndex += 10;
				}
				else if((strIndex+3) < strings.length && strings[strIndex+1].toUpperCase().equals("OF")) {
					// E.G., SIM on conn " INSERT EMP date OF deptno := '1/1/15'"
					attributeNames.add(strings[strIndex].toUpperCase());
					attributeValues.add(strings[strIndex].toUpperCase() + " " + strings[strIndex+1].toUpperCase() + " " + strings[strIndex+2].toUpperCase() + " " + strings[strIndex+4].toUpperCase());
					strIndex += 6;
				}
				else if((strIndex+1) < strings.length && strings[strIndex+1].equals(":=")) {
					attributeNames.add(strings[strIndex].toUpperCase());
					attributeValues.add(strings[strIndex+2].toUpperCase());
					strIndex += 4;
				}
			}

System.out.println("className: " + className);
System.out.println("nattributeNames: " + attributeNames);
System.out.println("attributeValues: " + attributeValues);
System.out.println("whereAttrValues: " + whereAttrValues);

/*          This implementation still needs to be completed.
			try {
				SIMHelper simhelper = new SIMHelper(conn);
				simhelper.executeInsert(className, attributeNames, attributeValues, "");
			} catch (Exception e) {
				System.out.println(e);
			}
			}
			if(currentEvaAttrib != null) evaAttribs.add(currentEvaAttrib.toUpperCase());
*/
			
		}
		
		return sparql; // Insert will return null.
	} 
	
    public String processNeo4j(String ReLstmt) {
		String[] strings = ReLstmt.replaceAll(":=", " := ").replaceAll(",", " ").replaceAll("( )+", " ").split(" ");
		String Where = "";
		if(ReLstmt.contains("WHERE")) Where = ReLstmt.substring(ReLstmt.indexOf("WHERE"), ReLstmt.indexOf("RETURN")).replaceAll("WHERE ", "");
System.out.println("Where: " + Where);
		String ReLs = ReLstmt.replaceAll("WHERE.*RETURN", "RETURN").replaceAll(" -", "-").replaceAll("- ", "-").replaceAll(",", " ").replaceAll("\\(", "").replaceAll("\\[", "").replaceAll("\\)", "").replaceAll("-", " ").replaceAll(">", "").replaceAll("<", "").replaceAll("\\]", "").replaceAll("( )+", " ");
		System.out.println(ReLs);
		strings = ReLs.split(" ");                   
		String className = strings[1].toUpperCase();
		List<String> dvaAttribs = new ArrayList<String>();
		List<String> evaAttribs = new ArrayList<String>();
		Map<String, String> whereAttrValues = new HashMap<String, String>();
		if(strings[4].equals("RETURN")) {
			int strIndex = 5;
			while(strIndex < strings.length) {
				if(strings[strIndex].contains(strings[3]))
					evaAttribs.add(strings[strIndex].replaceAll(".*\\.", "").toUpperCase() + " AT " + strings[2].toUpperCase());
				else
					dvaAttribs.add(strings[strIndex].replaceAll(".*\\.", "").toUpperCase());
				strIndex++;
			}
		}
		else if(strings[6].equals("RETURN")) {
			int strIndex = 7;
			while(strIndex < strings.length) {
				if(strings[strIndex].contains(strings[3]))
					evaAttribs.add(strings[strIndex].replaceAll(".*\\.", "").toUpperCase() + " AT " + strings[2].toUpperCase());
				else if(strings[strIndex].contains(strings[5]))
					evaAttribs.add(strings[strIndex].replaceAll(".*\\.", "").toUpperCase() + " AT " + strings[4].toUpperCase() + " AT " + strings[2].toUpperCase());
				else
					dvaAttribs.add(strings[strIndex].replaceAll(".*\\.", "").toUpperCase());
				strIndex++;
			}
		}
		if ( ! Where.equals("")) {
			String[] wstrings = Where.split(" ");
			int wIndex = 0;
			while(wIndex < wstrings.length) {
				// whereAttrValues.put(wstrings[wIndex].toUpperCase(), wstrings[wIndex+2].replaceAll("'", "").toUpperCase() + "\"^^<http://www.w3.org/2001/XMLSchema#>");
				whereAttrValues.put(wstrings[wIndex].toUpperCase(), wstrings[wIndex+2].replaceAll("'", "").toUpperCase());
				wIndex += 4;
			}
		}
System.out.println("className: " + className);
System.out.println("dvaAttribs: " + dvaAttribs);
System.out.println("evaAttribs: " + evaAttribs);
System.out.println("whereAttrValues: " + whereAttrValues);
		String SIMQuery = "";
		if(Where.equals(""))
			SIMQuery = "FROM " + className + " RETRIEVE " + dvaAttribs + ", " + evaAttribs;
		else
			SIMQuery = "FROM " + className + " RETRIEVE " + dvaAttribs + ", " + evaAttribs + " WHERE " + whereAttrValues;
		SIMQuery = SIMQuery.replaceAll("\\[", "").replaceAll("\\]", "").replaceAll("\\{", "").replaceAll("\\}", "").replaceAll("=", " = ");
System.out.println("SIMQuery: " + SIMQuery);
		return SIMQuery;
	}
}